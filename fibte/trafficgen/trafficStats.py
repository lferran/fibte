#!/usr/bin/python

try:
    import cPickle as pickle
except:
    import pickle

import matplotlib.pyplot as plt
import numpy as np
from fibte.trafficgen.flowGenerator import isElephant
from fibte import LINK_BANDWIDTH

"""
This module defines functions that extract statistics about the traffic files generated by the traffic generator.
"""

class TrafficStats(object):
    def __init__(self, filename):
        self.filename = filename
        self.params = self.get_traffic_params(self.filename)
        self.traffic_per_host = self.load_traffic_file()
        self.hosts = self.traffic_per_host.keys()
        self.collectAllStats()

    @staticmethod
    def get_traffic_params(filename):
        params = {'tg': ''}
        slash_index = filename.find('/')
        traffic_filename = filename[slash_index+1:]
        traffic_filename = traffic_filename.split('.')[0]
        traffic_filename = traffic_filename.replace('_to', '')
        tg =  traffic_filename.split('_')[0]
        params['tg'] = tg
        if tg == 'tg1':
            (senders, receivers, percents, rate, totaltime, timestep) = traffic_filename.split('_')[1:]
            params['senders'] = senders.split(',')
            params['receivers'] = receivers.split(',')
            (pmice, pelephant) = percents.split('e')
            params['pmice'] = float(pmice.replace('m', '').replace(',', '.'))
            params['pelephant'] = float(pelephant.replace(',', '.'))
            params['flow_rate'] = float(rate.strip('fr').replace(',', '.'))
            params['total_time'] = int(totaltime.strip('t'))
            params['time_step'] = int(timestep.strip('ts'))
        elif tg == 'tg2':
            (senders, receivers, percents, elephant_rate, mice_rate, target_load, totaltime, timestep) = traffic_filename.split('_')[1:]
            params['senders'] = senders.split(',')
            params['receivers'] = receivers.split(',')
            (pmice, pelephant) = percents.split('e')
            params['pmice'] = float(pmice.replace('m', '').replace(',', '.'))
            params['pelephant'] = float(pelephant.replace(',', '.'))
            params['elephant_rate'] = float(elephant_rate.strip('fre').replace(',', '.'))
            params['mice_time'] = float(mice_rate.strip('frm').replace(',', '.'))
            params['total_time'] = int(totaltime.strip('t'))
            params['time_step'] = int(timestep.strip('ts'))
        return params

    def load_traffic_file(self):
        traffic = pickle.load(open(self.filename,"r"))
        return traffic

    def get_last_flow_finish_time(self):
        """Returs the finish time of the last ending flow"""
        max_flow_finish_time = 0
        for (h, fl) in self.traffic_per_host.iteritems():
            for f in fl:
                start_time = f['start_time']
                duration = f['duration']
                end_time = start_time + duration
                if end_time > max_flow_finish_time:
                    max_flow_finish_time = end_time

        return max_flow_finish_time

    def flows_per_second(self):
        """
        Returns
        :param traffic:
        :return:
        """
        last_flow_end_time = int(self.get_last_flow_finish_time())
        self.traffic_per_second = {i: [] for i in range(0, last_flow_end_time+1)}
        for i in self.traffic_per_second.keys():
            fws = [f for h, fl in self.traffic_per_host.iteritems() for f in fl if f['start_time'] <= i and (f['start_time']+f['duration']) >= i]
            self.traffic_per_second[i] = fws

    def collectAllStats(self):
        self.flows_per_second()

    def get_flows_over_time_and_ratio(self):
        flows = []
        mice = []
        elephant = []
        for i, fws in self.traffic_per_second.iteritems():
            total_flows = len(fws)
            if total_flows != 0:
                flows.append(total_flows)
                e_count = len([f for f in fws if isElephant(f)])
                m_count = total_flows - e_count
                elephant.append(e_count/float(total_flows))
                mice.append(m_count/float(total_flows))
            else:
                flows.append(0)
                mice.append(0)
                elephant.append(0)
        return (flows, mice, elephant)

    def get_flows_over_time(self):
        flows = []
        mice = []
        elephant = []
        for i, fws in self.traffic_per_second.iteritems():
            total_flows = sum([f['size'] for f in fws])
            flows.append(total_flows)
            e_count = sum([f['size'] for f in fws if isElephant(f)])
            m_count = total_flows - e_count
            elephant.append(e_count)
            mice.append(m_count)

        MAX_LOAD = len(self.hosts)*LINK_BANDWIDTH

        flows = np.asarray(flows)/MAX_LOAD
        mice = np.asarray(mice)/MAX_LOAD
        elephant = np.asarray(elephant)/MAX_LOAD

        return (flows, mice, elephant)

    def plot_flows_over_time(self):
        """
        Plots the number of flows per second, as well as the ratio of elephant and mice
        :return:
        """
        # Get data to plot
        (flows, mice, elephant) = self.get_flows_over_time_and_ratio()
        fig = plt.figure(figsize=(80, 20))
        fig.suptitle("Number of active flows over time", fontsize=20)


        # Plot total number
        sub = fig.add_subplot(2, 1, 1)
        sub.set_xlabel("Time (s)", fontsize=16)
        sub.set_ylabel("Total number of flows", fontsize=16)
        sub.plot(flows, color='black', label="total", linewidth=2.0)
        sub.grid(True)

        # Plot ratios
        sub = fig.add_subplot(2, 1 ,2)
        sub.set_xlabel("Time (s)", fontsize=16)
        sub.plot(mice, color='green', label='mice', linewidth=2.0)
        sub.plot(elephant, color='blue', label='elephant', linewidth=2.0)
        sub.set_ylabel('Elephant and Mice ratio', fontsize=16)
        sub.grid(True)

        # Write legend and plot
        #plt.legend(loc='best')
        plt.show()

    def plot_traffic_over_time(self):
        # Get data to plot
        (flows, mice, elephant) = self.get_flows_over_time()
        fig, ax1 = plt.subplots(figsize=(80, 20))
        fig.suptitle("Total traffic in the network over time", fontsize=20)
        plt.xlabel("Time (s)", fontsize=16)

        # Plot total number
        ax1.set_ylabel("DC traffic", fontsize=16)
        ax1.plot(flows, color='black', label="total", linewidth=2.0)

        # Plot ratios
        ax1.plot(mice, color='green', label='mice', linewidth=2.0)
        ax1.plot(elephant, color='blue', label='elephant', linewidth=2.0)

        # Write legend and plot
        plt.legend(loc='best')
        # Set grid on
        plt.grid(True)
        plt.show()

    def get_average_host_load(self):
        """"""
        input_avg = []
        output_avg = []
        input_std = []
        output_std = []
        for (t, fws) in self.traffic_per_second.iteritems():
            host_traffic_in = {h: 0 for h in self.hosts}
            host_traffic_out = {h: 0 for h in self.hosts}
            # Collect per host
            for f in fws:
                host_traffic_in[f['src']] += f['size']
                host_traffic_out[f['dst']] += f['size']

            # Compute averages
            outavg = np.asarray(host_traffic_out.values())/LINK_BANDWIDTH
            inavg = np.asarray(host_traffic_in.values())/LINK_BANDWIDTH
            out_avg = outavg.mean()
            in_avg = inavg.mean()
            in_std = inavg.std()
            out_std = outavg.std()

            input_avg.append(in_avg)
            output_avg.append(out_avg)
            input_std.append(in_std)
            output_std.append(out_std)

        return ({'avg': input_avg, 'std': input_std},{'avg': output_avg, 'std': output_std})

    def plot_average_host_load(self):
        # Get data to plot
        (input, output) = self.get_average_host_load()
        fig = plt.figure(figsize=(80, 20))
        fig.suptitle("Average host load over time", fontsize=20)

        sub = fig.add_subplot(2, 1, 1)
        sub.set_xlabel("Time (s)", fontsize=16)
        sub.set_ylabel("Average host load", fontsize=16)
        sub.plot(input['avg'], color='black', label="Average traffic", linewidth=2.0)
        sub.grid(True)

        sub = fig.add_subplot(2, 1, 2)
        sub.set_xlabel("Time (s)", fontsize=16)
        sub.set_ylabel("Std host load", fontsize=16)
        sub.plot(input['std'], color='blue', label="std. host TX traffic", linewidth=2.0)
        sub.plot(output['std'], color='red', label="std. host RX traffic", linewidth=2.0)
        sub.grid(True)

        # Write legend and plot
        plt.legend(loc='best')
        # Set grid on
        plt.show()

    def get_host_load(self, host):
        input_load = []
        output_load = []
        for (t, fws) in self.traffic_per_second.iteritems():
            tin_load = 0
            tout_load = 0
            # Collect per host
            for f in fws:
                if f['src'] == host:
                    tin_load += f['size']
                elif f['dst'] == host:
                    tout_load += f['size']

            input_load.append(tin_load)
            output_load.append(tout_load)

        input_load = np.asarray(input_load)
        output_load = np.asarray(output_load)

        return (input_load/LINK_BANDWIDTH, output_load/LINK_BANDWIDTH)

    def plot_host_load(self, host):
        # Get data to plot
        (input, output) = self.get_host_load(host)
        fig, ax1 = plt.subplots(figsize=(80, 20))
        fig.suptitle("Host load over time", fontsize=20)
        plt.xlabel("Time (s)", fontsize=16)
        plt.ylim([0, 1.2])

        # Plot total number
        ax1.set_ylabel("Host traffic", fontsize=16)
        ax1.plot(input, color='green', label="Tx load", linewidth=2.0)
        ax1.plot(output, color='red', label='Rx load', linewidth=2.0)

        # Write legend and plot
        plt.legend(loc='best')
        # Set grid on
        plt.grid(True)
        plt.show()

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument('-f','--traffic_file',
                           help='load traffic from a file so it can be repeated',
                           default="")

    parser.add_argument('--node', help="Plot traffic observed at node links only. e.g: h_0_0", type=str, default=None)

    args = parser.parse_args()


    if args.traffic_file:
        ts = TrafficStats(args.traffic_file)
        if args.node:
            ts.plot_host_load(host=args.node)

        ts.plot_flows_over_time()
        ts.plot_traffic_over_time()
        ts.plot_average_host_load()
